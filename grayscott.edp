// =========================================================================================
// Gray Scott Model
// =========================================================================================
load "iovtk"; // for saving data in paraview format
verbosity=0;
real wdate=1;
string filename="energyData.m"; // for saving datat in matlab format
string foldername = "data"; //for saving ParaView Data
exec("mkdir "+foldername);

real dt=1.0; //time step size
int nTimestep = 20000; //number of iterations
real iterguarda=50; // iterations between each save for paraview
real iterdib=1; // in which iteration start saving for paraview

//-----------------------------------------------------------------------------------------
// Set Parameters
//-----------------------------------------------------------------------------------------
real time=0.0;
real gammau=1.0e-4, gammav=0.5e-4; // diffusion coefficients
real feed = 0.04, kill=0.06; //reaction coefficients

real x0 = -2.5;
real x1 = 2.5;
real y0 = -2.5;
real y1 = 2.5;
int meshsize = 100;
mesh Th = square(meshsize,meshsize,[x0+(x1-x0)*x, y0+(y1-y0)*y]); // structured mesh
// plot(Th, wait=true); //plot the mesh

//-----------------------------------------------------------------------------------------
// Set Finite Element Spaces
//-----------------------------------------------------------------------------------------
fespace Xh(Th,P1,periodic=[[1,x],[3,x],[2,y],[4,y]]); //define a Finite Element space
//P1 = Piecewise Linear Finite Elements
//periodic boundary conditions
Xh u,u0,ub,uh;
Xh v,v0,vb,vh;


//-----------------------------------------------------------------------------------------
// Define Weak Formulation
//-----------------------------------------------------------------------------------------
problem GSu ( [u],[uh])=
	int2d(Th) ( //integral containing all u^n+1 terms
			(1/dt)*u*uh
			+ gammau*(dx(u)*dx(uh) + dy(u)*dy(uh))
			)
	+int2d(Th) ( //integral containing all other terms
			- (1/dt)*u0*uh
			// + gammau*(dx(u0)*dx(uh) + dy(u0)*dy(uh))
			+ u0*v0*v0*uh
			- feed*(1.0 - u0)*uh
			)
// +on(1,2,3,4, u = ub)
;

problem GSv ( [v],[vh])=
	int2d(Th) ( //integral containing all v^n+1 terms
			(1/dt)*v*vh
			+ gammav*(dx(v)*dx(vh) + dy(v)*dy(vh))
			)
	+int2d(Th) ( //integral containing all other terms
			- (1/dt)*v0*vh
			// + gammav*(dx(v0)*dx(vh) + dy(v0)*dy(vh))
			- u0*v0*v0*vh
			+ (feed + kill)*v0*vh
			)
// +on(1,2,3,4, v = vb)
;

//-----------------------------------------------------------------------------------------
// Set the Initial Condition
//-----------------------------------------------------------------------------------------
func real f(real xx, real yy){ //Creates a circle with value 1 in center. 0 outside
	real width = 0.1;
	if (xx < width && xx > -width && yy < width && yy > -width){
		return 1.0;
	}
	else {
		return 0.0;
	}
}
v0 = f(x,y); //initial v uses f
u0 = 1.0; //inital u is 1 everwhere
Xh d = u0/(u0 + v0); // concentration of u

//-----------------------------------------------------------------------------------------
//SAVE INITIAL DATA
//-----------------------------------------------------------------------------------------

savevtk(foldername+"/"+"Data_Paraview_0.vtu",Th,u,v,d,dataname="u v d"); // saving data for ParaView


//-----------------------------------------------------------------------------------------
// Run the Main Routine
//-----------------------------------------------------------------------------------------
for (int i=1;i<=nTimestep;i++){

time = time + dt;//update time

GSu; //solve the problem for u
GSv; //solve the problem for v
d = u/(u + v); //update concentration
// u = max(min(u,1.0),0.0); //clamp u,v between 0 and 1
// v = max(min(v,1.0),0.0);
plot(d, fill=true, value=true); //plot d

// update for next iteration
u0  = u;
v0 = v;

cout << "time = " << time <<  endl;

if (abs(iterdib-i)<1e-5) {
savevtk(foldername+"/"+"Data_Paraview_"+i+".vtu",Th,u,v,d,dataname="u v d"); //saving data for ParaView
iterdib=iterdib+iterguarda;
}

}
//-----------------------------------------------------------------------------------------
// END OF the Main Routine
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
// SAVING FINAL DATA
//-----------------------------------------------------------------------------------------
{
ofstream gnu("u" + nTimestep + ".gp");
gnu <<u[]<<endl;
}
{
ofstream gnu("v" + nTimestep + ".gp");
gnu <<v[]<<endl;
}